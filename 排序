插入排序：
template<typename t>
void insertSort(T data[],int n){
  for(int i=1;i<n;i++){
    T tmp=data[i];
    for(int j=i;j>0&&tmp<data[j-1];j--){
      data[j]=data[j-1];
    }
    data[j]=tmp;
  }
}
时间复杂度O(n2)。



选择排序：
template<typename T>
void selectionSort(T data[],int n){
	for(int i=0,j,least;i<n-1;i++){
		for(j=i+1,least=i;j<n;j++){
			if(data[j]<data[least]){
				least=j;
			}
		}
		swap(data[least],data[i]);
	}
}
时间复杂度O(n2)



冒泡排序：
template<typename T>
void bubbleSort(T data[],int n){
	for(int i=0;i<n-1;i++){
		for(int j=n-1;j>i;j--){
			if(data[j]<data[j-1]){
				swap(data[j],data[j-1]);
			}
		}
	}
}


void bubbleSort(T data[],int n){
	bool sorted=false;
	while(!sorted){
		sorted=true;
		for(int i=1;i<n;i++){
			if(data[i-1]>data[i]){
				swap(data[j-1],data[j]);
				sorted=false;
			}
		}
		n--;
	}
}
时间复杂度O(n2)


Shell排序：
Shell排序的执行时间依赖于增量序列。
好的增量序列的共同特征：
① 最后一个增量必须为1；
② 应该尽量避免序列中的值(尤其是相邻的值）互为倍数的情况。
有人通过大量的实验，给出了目前较好的结果：当n较大时，比较和移动的次数约在n到1.6n之间
void shellsort(int a[], int n)
{
	int i, j, gap;
	for (gap = n / 2; gap > 0; gap /= 2)
		for (i = gap; i < n; i++)
			for (j = i - gap; j >= 0 && a[j] > a[j + gap]; j -= gap)
				Swap(a[j], a[j + gap]);
}



堆排序：
堆是具有以下两个属性的二叉树：
每个节点的值不会小于其子节点的值；
树是完全平衡的，最底层的叶子节点都位于最左边的位置。
void MaxHeapFixDown(int a[], int i, int n){
     int j = 2*i+1;
     int temp = a[i];
     while(j<n){
         if(j+1<n&&a[j]<a[j+1])
             ++j;
         if(temp>a[j])
             break;
        else{
            a[i]=a[j];
            i=j;
            j=2*i+1;
        }
    }
    a[i]=temp;
}

//堆排序
void HeapSort(int a[], int n){
    for(int i= n/2-1;i>=0;i--)
        MaxHeapFixDown(a,i,n);
    for(int i=n-1;i>=1;i--){
        swap(a[i],a[0]);
        MaxHeapFixDown(a,0,i);
    }
}


快速排序：
void QuickSort(int a[], int l,int r){
     if(l<r){
         int i=l,j=r,temp=a[l];
         while(i<j){
             while(i<j&&temp<=a[j])
                 --j;
             if(i<j)
                 a[i++]=a[j];
 
             while(i<j&&temp>a[i])
                 ++i;
             if(i<j)
                 a[j--]=a[i];
         }
         a[i]=temp;
         QuickSort(a,l,i-1);
         QuickSort(a,i+1,r);
     }
 }
 
 
 归并排序：
 void mergeSort(int *a,int lo,int hi){
 	if((hi-lo)<2){
	return ;
	}
	int mi=(lo+hi)>>1;
	mergeSort(a,lo,mi);
	mergeSort(a,mi,hi);
	merge(a,lo,mi,hi);
 }
 void merge(int *a,int lo,int mi,int hi){
 	int *A=a+lo;
	int lb=mi-lo;
	int *B=new int[lb];
	for(int i=0;i<lb;i++){
		B[i]=A[i];
	}
	int lc=hi-mi;
	int *C=a+mi;
	for(int i=0,j=0,k=0;(j<lb)||(k<lc);){
		if((j<lb)&&(!(k<lc)||B[j]<C[k])){
			A[i++]=B[j++];
			}
		if((k<lc)&&(!(j<lb)||C[k]<B[j])){
			A[i++]=C[k++];
		}
	}
	delete[]B;
 }
 
 fibonacci:
 int fibI(int n){
 	int f=0;g=1;
	while(n-->0){
		g+=f;
		f=g-f;
	}
	return f;
 }
 
二分查找：
void search(int *a,int e,int lo,int hi){
	while(hi-lo>1){
		int mi=(lo+hi)>>1;
		(e<a[mi])?hi=mi:lo=mi;
		
	}
	return (e==a[lo])?lo::-1;
}
 
 
 
 
 
 
 
 
 
 
 数组倒置：
 void reverse(int a[],int lo,int hi){
 	while(lo<hi){
	swap(a[lo++],a[hi--]);
	}
 }


基数排序：
void RadixSort(int a[], int n){
     int key = KeySize(a,n);
     int bucket[10][10]={0};
     int order[10]={0};
     for(int r = 1;key>0;key--,r*=10){
         for(int i=0;i<n;i++){
              int lsd = (a[i]/r)%10;
              bucket[lsd][order[lsd]++]=a[i];
         }
 
         int k = 0;
         for(int i = 0;i<10;i++){
             if(order[i]!=0){
                 for(int j = 0;j<order[i];j++)
                     a[k++]=bucket[i][j];
             }
             order[i]=0;
         }
     }
 }
 
 计数排序：
 void countingSort(int *a,int n){
 	int i;
	int largest=a[0];
	int *tmp=new int[n];
	for(int i=0;i<n;i++){
		if(largest<a[i]){
			largest=a[i];
		}
	}
	int *count=new int[largest+1];
	for(int i=0;i<=largest;i++){
		count[i]=0;
	}
	for(int i=0;i<n;i++){
		count[a[i]]++;
	}
	for(int i=1;i<=largest;i++){
		count[i]=count[i-1]+count[i];
	}
	for(int i=n-1;i>=0;i--){
		tmp[count[a[i]]-1]=a[i];
		count[data[i]]--;
	}
	for(int i=0;i<n;i++){
		data[i]=tmp[i];
	}
 }
