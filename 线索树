节点使用了线索的树叫做线索树。

AVL：最早的平衡二叉树,应用场景：window对进程空间地址的管理。

红黑树：平衡二叉树，广泛的应用于C++的STL中如map，set都是用红黑树实现的。

B/B+树：用在磁盘文件组织，数据索引和数据库索引。

Tried树：用在统计和排序大量字符串，如自动机。



二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树）它或者是一棵空树，
或者是具有下列性质的二叉树： 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 
若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。



平衡二叉树（Balanced Binary Tree）具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，
并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等。 
最小二叉平衡树的节点的公式如下 F(n)=F(n-1)+F(n-2)+1 这个类似于一个递归的数列，可以参考Fibonacci数列，
1是根节点，F(n-1)是左子树的节点数量，F(n-2)是右子树的节点数量。



dsw算法提供了一种将二叉树转化成平衡二叉树的方法. 
算法的核心思想是利用旋转. 
1.通过右旋转生成主链. 
2.通过左旋转生成平衡二叉树.
